class SnakeGame {

    // the Snake
    field Snake snake;

    // the game grid
    field SnakeGrid grid;

    // the score
    field int score;

    // the level (1+ how many pellets have been eaten)
    field int level;

    // whether the game is paused or not
    field boolean paused;

    // the game cycle
    field int cycle;

    // how long to wait between cycles
    field int delay;

    // creates a new SnakeGame
    constructor SnakeGame new() {

        // use the delay in the user pressing a key to seed our PRNG
        do Random.setSeed(RandSeed.getSeed());

        // init game vars
        let score = 0;
        let level = 1;
        let paused = false;
        let cycle = 0;
        let delay = 100;

        // create the grid
        let grid = SnakeGrid.new(this, 512, 256);

        // create the snake
        let snake = Snake.new(this, grid.sizeX() / 2, grid.sizeY() / 2, 10, 3);

        do grid.placeFood();
        do grid.drawStatus();

        return this;

    }

    // disposes of a SnakeGame
    method void dispose() {

        do snake.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);

        return;

    }

    // run the game
    method void run() {

        var boolean broken;
        var boolean exit;
        var int key;

        // loop until told to exit
        let exit = false;
        while(~exit) {

            do snake.rememberDir();

            // handle the game being paused
            if( paused ) {
                let broken = false;
                while(~broken) {
                    let key = 0;
                    while(~key) {
                        let key = Keyboard.keyPressed();
                    }
                    if( key = 80 ) {
                        // p
                        let broken = true;
                        let paused = false;
                    }
                    if( key = 81 ) {
                        // q
                        let broken = true;
                        let exit = true;
                    }
                    do grid.drawStatus();
                    do Sys.wait(delay);
                }
            }

            // normal unpaused loop
            let key = Keyboard.keyPressed();
            if( key = 80 ) {
                // p
                let paused = true;
            }
            if( key = 81 ) {
                // q
                let exit = true;
            }
            if( key = 130 ) {
                // left arrow, valid only if we were going up or down
                if( snake.getLastDir() = 1 ) {
                    do snake.setDir(3);
                }
                if( snake.getLastDir() = 2 ) {
                    do snake.setDir(3);
                }
            }
            if( key = 131 ) {
                // up arrow, valid only if we were going left or right
                if( snake.getLastDir() = 3 ) {
                    do snake.setDir(1);
                }
                if( snake.getLastDir() = 4 ) {
                    do snake.setDir(1);
                }
            }
            if( key = 132 ) {
                // right arrow, valid only if we were going up or down
                if( snake.getLastDir() = 1 ) {
                    do snake.setDir(4);
                }
                if( snake.getLastDir() = 2 ) {
                    do snake.setDir(4);
                }
            }
            if( key = 133 ) {
                // down arrow, valid only if we were going left or right
                if( snake.getLastDir() = 3 ) {
                    do snake.setDir(2);
                }
                if( snake.getLastDir() = 4 ) {
                    do snake.setDir(2);
                }
            }

            // try to move one square in the current direction
            if( ~ snake.tryMove() ) {
                do grid.drawCrashed();
                do Sys.halt();
            }

            // have we eaten a food pellet?
            if( grid.checkFood(snake.posX(), snake.posY()) ) {
                do snake.eatFood();
                do nextLevel();
                do grid.placeFood();
            }

            // make the snake grow
            // takes care of drawing the new head, growing if
            // needed, and clearing the old tail if not
            do snake.grow(cycle);

            // redraw the food, status, delay and increment the cycle
            do grid.drawFood();
            do grid.drawStatus();
            do Sys.wait(delay);
            do nextCycle();

            // check if the snake's history needs to be rewritten
            if( snake.checkRewriteHistory() ) {
                let cycle = snake.getLength();
            }

        }

        do grid.drawDone();
        do Sys.halt();

        return;

    }

    // bumps the game to the next level
    method void nextLevel() {

        let score = score + (10 * level);
        let level = level + 1;
        if( delay > 30 ) {
            let delay = delay - 5;
        }

        return;
    }

    // increment the cycle count by 1
    method int nextCycle() {
        let cycle = cycle + 1;
        return cycle;
    }

    // reader methods
    method SnakeGrid getGrid() {
        return grid;
    }
    method Snake getSnake() {
        return snake;
    }
    method int getCycle() {
        return cycle;
    }
    method int getScore() {
        return score;
    }
    method int getLevel() {
        return level;
    }
    method int getPaused() {
        return paused;
    }

}