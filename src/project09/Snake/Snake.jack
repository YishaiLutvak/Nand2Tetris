class Snake {

    // the game the snake is playing in
    field SnakeGame game;

    // the XY position of the snake's head
    field int posX, posY;

    // the length of the snake
    field int length;

    // how much the snake grows by when it eats a pellet
    field int growby;

    // how much the snake has left to grow
    field int togrow;

    // the direction the snake is/was moving
    // 0=none,1=up,2=down,3=left,4=right
    field int dir, lastdir;

    // the history of the snake's movements
    field Array histX, histY;
    field int histSize;

    // creates a new Snake
    // args are X/Y position of head, length and how much to grow by
    constructor Snake new(SnakeGame Agame, int Ax, int Ay, int Alen, int Agrowby) {

        var int i;

        let game = Agame;
        let posX = Ax - Alen;
        let posY = Ay;
        let length = Alen;
        let growby = Agrowby;

        let togrow = 0;
        let dir = 4;
        let lastdir = 4;
        let histSize = 512;
        let histX = Array.new(histSize);
        let histY = Array.new(histSize);

        // draw the initial snake
        let i = 0;
        while( i < length ) {
            let posX = posX + 1;
            do drawHead(game.getCycle());
            let i = i + 1;
            do game.nextCycle();
        }

        return this;

    }

    // disposes of a Snake
    method void dispose() {

        do histX.dispose();
        do histY.dispose();
        do Memory.deAlloc(this);
        return;

    }

    // checks if the snake's history needs to be rewritten
    method boolean checkRewriteHistory() {

        if( game.getCycle() = histSize ) {
            do rewriteHistory();
            return true;
        }

        return false;

    }

    // rewrites the snake's history
    method void rewriteHistory() {

        var int i, src, dst;

        let i = length;
        let dst = 0;
        let src = histSize - length;
        while( i > 0 ) {
            let histX[dst] = histX[src];
            let histY[dst] = histY[src];
            let src = src + 1;
            let dst = dst + 1;
            let i = i - 1;
        }

        return;

    }

    // gets the snake's head position
    method int posX() {
        return posX;
    }
    method int posY() {
        return posY;
    }

    // gets the snake's length
    method int getLength() {
        return length;
    }

    // gets the snake's direction
    method int getDir() {
        return dir;
    }

    // gets the snake's last direction
    method int getLastDir() {
        return lastdir;
    }

    // sets the snake's direction
    method void setDir(int newdir) {
        let dir = newdir;
        return;
    }

    // copies dir to lastdir
    method void rememberDir() {
        let lastdir = dir;
        return;
    }

    // checks if we can move one more space in the
    // current direction
    method boolean tryMove() {

        var SnakeGrid grid;
        let grid = game.getGrid();

        if( dir = 1 ) {
            // up
            if( posY = 0 ) {
                return false;
            }
            else {
                let posY = posY - 1;
            }
        }
        if( dir = 2 ) {
            // down
            if( posY = grid.sizeY() ) {
                return false;
            }
            else {
                let posY = posY + 1;
            }
        }
        if( dir = 3 ) {
            // left
            if( posX = 0 ) {
                return false;
            }
            else {
                let posX = posX - 1;
            }
        }
        if( dir = 4 ) {
            // right
            if( posX = grid.sizeX() ) {
                return false;
            }
            else {
                let posX = posX + 1;
            }
        }

        // check if the snake has hit itself
        if( grid.checkOccupied(posX, posY) ) {
            return false;
        }

        return true;

    }

    // makes the snake grow
    method void grow(int cycle) {

        // draw the new head
        do drawHead(cycle);

        // does the snake have some growing to do?
        if( togrow > 0 ) {
            let togrow = togrow - 1;
            let length = length + 1;
        }
        // otherwise clear the old tail
        else {
            do clearTail(cycle);
        }

        return;

    }

    // draws the current head of the snake
    method void drawHead(int cycle) {

        var SnakeGrid grid;

        let grid = game.getGrid();
        do grid.drawSnakeBit(posX, posY);
        let histX[cycle] = posX;
        let histY[cycle] = posY;

        return;

    }

    // clears the current tail of the snake
    method void clearTail(int cycle) {

        var SnakeGrid grid;
        var int tailIndex, tailX, tailY;

        let tailIndex = cycle - length;
        let tailX = histX[tailIndex];
        let tailY = histY[tailIndex];
        let grid = game.getGrid();
        do grid.clearSnakeBit(tailX, tailY);

        return;

    }

    // the snake eats a food pellet
    method void eatFood() {
        let togrow = togrow + growby;
        return;
    }

}