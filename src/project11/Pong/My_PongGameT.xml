<tokens>
  <keyword> class  </keyword>
  <identifier> PongGame </identifier>
  <symbol> { </symbol>
  <keyword> static  </keyword>
  <identifier> PongGame </identifier>
  <identifier> instance </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <identifier> Bat </identifier>
  <identifier> bat </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <identifier> Ball </identifier>
  <identifier> ball </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <keyword> int  </keyword>
  <identifier> wall </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <keyword> boolean  </keyword>
  <identifier> exit </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <keyword> int  </keyword>
  <identifier> score </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <keyword> int  </keyword>
  <identifier> lastWall </identifier>
  <symbol> ; </symbol>
  <keyword> field  </keyword>
  <keyword> int  </keyword>
  <identifier> batWidth </identifier>
  <symbol> ; </symbol>
  <keyword> constructor  </keyword>
  <identifier> PongGame </identifier>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> clearScreen </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> batWidth </identifier>
  <symbol> = </symbol>
  <integerConstant> 50 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> bat </identifier>
  <symbol> = </symbol>
  <identifier> Bat </identifier>
  <symbol> . </symbol>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <integerConstant> 230 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 229 </integerConstant>
  <symbol> , </symbol>
  <identifier> batWidth </identifier>
  <symbol> , </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> ball </identifier>
  <symbol> = </symbol>
  <identifier> Ball </identifier>
  <symbol> . </symbol>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <integerConstant> 253 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 222 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 511 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 229 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> ball </identifier>
  <symbol> . </symbol>
  <identifier> setDestination </identifier>
  <symbol> ( </symbol>
  <integerConstant> 400 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 238 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 511 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 240 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Output </identifier>
  <symbol> . </symbol>
  <identifier> moveCursor </identifier>
  <symbol> ( </symbol>
  <integerConstant> 22 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Output </identifier>
  <symbol> . </symbol>
  <identifier> printString </identifier>
  <symbol> ( </symbol>
  <stringConstant> Score: 0 </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> exit </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> score </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> wall </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> lastWall </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <keyword> this </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method  </keyword>
  <keyword> void </keyword>
  <identifier> dispose </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> dispose </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> ball </identifier>
  <symbol> . </symbol>
  <identifier> dispose </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Memory </identifier>
  <symbol> . </symbol>
  <identifier> deAlloc </identifier>
  <symbol> ( </symbol>
  <keyword> this </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function  </keyword>
  <keyword> void </keyword>
  <identifier> newInstance </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> instance </identifier>
  <symbol> = </symbol>
  <identifier> PongGame </identifier>
  <symbol> . </symbol>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function  </keyword>
  <identifier> PongGame </identifier>
  <identifier> getInstance </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> instance </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method  </keyword>
  <keyword> void </keyword>
  <identifier> run </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> char  </keyword>
  <identifier> key </identifier>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <identifier> exit </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <identifier> exit </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <identifier> Keyboard </identifier>
  <symbol> . </symbol>
  <identifier> keyPressed </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> move </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> moveBall </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Sys </identifier>
  <symbol> . </symbol>
  <identifier> wait </identifier>
  <symbol> ( </symbol>
  <integerConstant> 50 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <integerConstant> 130 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> setDirection </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <integerConstant> 132 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> setDirection </identifier>
  <symbol> ( </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <integerConstant> 140 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> exit </identifier>
  <symbol> = </symbol>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <symbol> ( </symbol>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <identifier> exit </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> key </identifier>
  <symbol> = </symbol>
  <identifier> Keyboard </identifier>
  <symbol> . </symbol>
  <identifier> keyPressed </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> move </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> moveBall </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Sys </identifier>
  <symbol> . </symbol>
  <identifier> wait </identifier>
  <symbol> ( </symbol>
  <integerConstant> 50 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> exit </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> Output </identifier>
  <symbol> . </symbol>
  <identifier> moveCursor </identifier>
  <symbol> ( </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 27 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Output </identifier>
  <symbol> . </symbol>
  <identifier> printString </identifier>
  <symbol> ( </symbol>
  <stringConstant> Game Over </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method  </keyword>
  <keyword> void </keyword>
  <identifier> moveBall </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int  </keyword>
  <identifier> bouncingDirection </identifier>
  <symbol> , </symbol>
  <identifier> batLeft </identifier>
  <symbol> , </symbol>
  <identifier> batRight </identifier>
  <symbol> , </symbol>
  <identifier> ballLeft </identifier>
  <symbol> , </symbol>
  <identifier> ballRight </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> wall </identifier>
  <symbol> = </symbol>
  <identifier> ball </identifier>
  <symbol> . </symbol>
  <identifier> move </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> wall </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <symbol> ( </symbol>
  <identifier> wall </identifier>
  <symbol> = </symbol>
  <identifier> lastWall </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> lastWall </identifier>
  <symbol> = </symbol>
  <identifier> wall </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> bouncingDirection </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> batLeft </identifier>
  <symbol> = </symbol>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> getLeft </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> batRight </identifier>
  <symbol> = </symbol>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> getRight </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> ballLeft </identifier>
  <symbol> = </symbol>
  <identifier> ball </identifier>
  <symbol> . </symbol>
  <identifier> getLeft </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> ballRight </identifier>
  <symbol> = </symbol>
  <identifier> ball </identifier>
  <symbol> . </symbol>
  <identifier> getRight </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> wall </identifier>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> exit </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> batLeft </identifier>
  <symbol> &gt; </symbol>
  <identifier> ballRight </identifier>
  <symbol> ) </symbol>
  <symbol> | </symbol>
  <symbol> ( </symbol>
  <identifier> batRight </identifier>
  <symbol> &lt; </symbol>
  <identifier> ballLeft </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <identifier> exit </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ballRight </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> batLeft </identifier>
  <symbol> + </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> bouncingDirection </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ballLeft </identifier>
  <symbol> &gt; </symbol>
  <symbol> ( </symbol>
  <identifier> batRight </identifier>
  <symbol> - </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> bouncingDirection </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> batWidth </identifier>
  <symbol> = </symbol>
  <identifier> batWidth </identifier>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> bat </identifier>
  <symbol> . </symbol>
  <identifier> setWidth </identifier>
  <symbol> ( </symbol>
  <identifier> batWidth </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> score </identifier>
  <symbol> = </symbol>
  <identifier> score </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Output </identifier>
  <symbol> . </symbol>
  <identifier> moveCursor </identifier>
  <symbol> ( </symbol>
  <integerConstant> 22 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Output </identifier>
  <symbol> . </symbol>
  <identifier> printInt </identifier>
  <symbol> ( </symbol>
  <identifier> score </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> do </keyword>
  <identifier> ball </identifier>
  <symbol> . </symbol>
  <identifier> bounce </identifier>
  <symbol> ( </symbol>
  <identifier> bouncingDirection </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
