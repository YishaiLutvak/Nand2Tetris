<tokens>
  <keyword> class </keyword>
  <identifier> Bat </identifier>
  <symbol> { </symbol>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> width </identifier>
  <symbol> , </symbol>
  <identifier> height </identifier>
  <symbol> ; </symbol>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> direction </identifier>
  <symbol> ; </symbol>
  <keyword> constructor </keyword>
  <identifier> Bat </identifier>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> Ax </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> Ay </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> Awidth </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> Aheight </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <identifier> Ax </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <identifier> Ay </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> width </identifier>
  <symbol> = </symbol>
  <identifier> Awidth </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> height </identifier>
  <symbol> = </symbol>
  <identifier> Aheight </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> direction </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> show </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <keyword> this </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> dispose </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> Memory </identifier>
  <symbol> . </symbol>
  <identifier> deAlloc </identifier>
  <symbol> ( </symbol>
  <keyword> this </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> show </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> setColor </identifier>
  <symbol> ( </symbol>
  <keyword> true </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> draw </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> hide </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> setColor </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> draw </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> draw </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <identifier> height </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> setDirection </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> Adirection </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> direction </identifier>
  <symbol> = </symbol>
  <identifier> Adirection </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> int </keyword>
  <identifier> getLeft </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> int </keyword>
  <identifier> getRight </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> setWidth </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> Awidth </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> do </keyword>
  <identifier> hide </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> width </identifier>
  <symbol> = </symbol>
  <identifier> Awidth </identifier>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> show </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> move </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> direction </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> setColor </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <identifier> height </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> setColor </identifier>
  <symbol> ( </symbol>
  <keyword> true </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <identifier> height </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> ) </symbol>
  <symbol> &gt; </symbol>
  <integerConstant> 511 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 511 </integerConstant>
  <symbol> - </symbol>
  <identifier> width </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> setColor </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <identifier> height </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> setColor </identifier>
  <symbol> ( </symbol>
  <keyword> true </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> width </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <identifier> height </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
